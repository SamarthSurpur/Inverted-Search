/*
NAME: SAMARTH S
DATE: 24/06/2023
Project title: Inverted Search
*/

#include "inverted_index.h"

int main(int argc, char *argv[])
{
    int flag = 0;
    char choice1;

    if (argc == 1)
    {
        printf("Please pass valid file names through the command line.\n");
        return FAILURE;
    }

    file_node_t *file = NULL;
    validate_n_store_filenames(&file, argv);

    if (file == NULL)
    {
        return FAILURE;
    }

    main_node_t *head[SIZE] = {NULL};

    for (int i = 0; i < SIZE; i++)
    {
        head[i] = NULL;
    }

    do
    {
        int choice;

        printf("\nSelect your choice among the following options:\n");
        printf("1. Create Database\n2. Display Database\n3. Search Database\n4. Save Database\n5. Update Database\n6. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1:
            {
                flag = 1;

                if (create_DB(file, head) == FAILURE)
                {
                    printf("DATABASE creation failure.\n");
                }
                break;
            }
            case 2:
            {
                if (display_DB(head) == SUCCESS)
                {
                    printf("Display DATABASE success.\n");
                }
                else
                {
                    printf("No data found in DATABASE.\n");
                }
                break;
            }
            case 3:
            {
                char word[50];

                printf("Enter the word you want to search: ");
                scanf("%s", word);

                if (search_DB(head, word) == NOT_PRESENT)
                {
                    printf("%s not present in DATABASE.\n", word);
                }
                break;
            }
            case 4:
            {
                int save;
                char filename[50];

                printf("Enter the file name: ");
                scanf("%s", filename);

                if ((save = save_DB(head, filename)) == SUCCESS)
                {
                    printf("DATABASE is saved.\n");
                }
                else if (save == EMPTYLIST)
                {
                    printf("No data found in DATABASE to save.\n");
                }
                else
                {
                    printf("%s failed to open.\n", filename);
                }
                break;
            }
            case 5:
            {
                if (flag == 1)
                {
                    char filename[50];

                    printf("Enter the filename to update DATABASE: ");
                    scanf("%s", filename);

                    if (update_DB(&file, head, filename) == SUCCESS)
                    {
                        printf("Update DATABASE Success.\n");
                    }
                }
                else
                {
                    printf("Error: 'Create Database' operation must be called before attempting to call the 'Update Database' operation.\n");
                }
                break;
            }
            case 6:
            {
                return SUCCESS;
            }
            default:
                printf("Enter a proper choice!\n");
                break;
        }

        printf("Do you want to continue (y/n)? ");
        scanf(" %c", &choice1);

    } while (choice1 == 'y' || choice1 == 'Y');

    return SUCCESS;
}
